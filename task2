
#include "stdafx.h"
#include "CImg.h"
#include <string>
#include <math.h>
#include <iostream>
#include <array>


using namespace cimg_library;
using namespace std;


void calcHist(string nameofimage) {
	CImg<unsigned char> image("nameofimage"), visu(image.width(), image.height(), 1, 3, 0);
	CImg<float> histogram;
	int *histTab[255];
	int temp1;
	//for storing histogram values
	for (unsigned int i = 0; i < image.width(); i++) {
		for (unsigned int j = 0; j < image.height(); j++) {
			temp1 = image(i, j);
			*histTab[temp1]++;
		}
	}
}
void plotGenerator() {
	int n = 1000;
	CImg<int> histImg(256, n);
	for (int i = 0;i < 256;i++) {
		for (int j = 0; &histTab[i]; j++) {
			histImg(i, j) = 255;
				if (histImg(i, j) > n)
				histImg(i, j) = n;
		}
	}
		CImgDisplay main_disp(histImg);
		//wait until its closed
	while (!main_disp.is_closed()) { main_disp.wait(); }
	}

void huniform(string nameofimage){

	CImg<unsigned char> image("nameofimage"), visu(image.width(), image.height(), 1, 3, 0);
	/*uniform final probability density function*/
	unsigned char temp[255];
	unsigned char temp1;
	unsigned int max = 255;
	unsigned int min = 0;
	//for storing histogram values
	for(unsigned int i = 0; i < image.width(); i++) {
		for (unsigned int j = 0; j < image.height(); j++) {
			temp1 = image(i, j);
			temp[temp1]++;
		}
	}
	/*for finding min and max*/
	for(unsigned char a = 0; a < 256; a++) {
		if (temp[a] < min) {
			min = temp[a];
		}
		else if (temp[a] > max) {
			max = temp[a];
		}
	}

	/*finding for g(f) , for imlementing g(F) to image*/
	int g[255];
	unsigned int result = 0;
	for(int i = 0; i < 256; i++) {
			result += min + (max - min) / 255 * (image.width()*image.height())*temp[i];
			g[i] = result;
	}

	for (int i = 0; i < image.width(); i++) {
		for (int j = 0; j < image.height(); j++) {
			for (int k = 0; k < 256; k++)
				image(i, j) = g[k];
		}
	}

	CImgDisplay main_disp(image, "huniform");
	while (!main_disp.is_closed()) { main_disp.wait(); }
}
float cmean(string nameofimage) {
	CImg<unsigned char> image("nameofimage"), visu(image.width(), image.height(), 1, 3, 0);
	int temp[255];
	int temp1;
	unsigned int max = 255;
	unsigned int min = 0;
	//for storing histogram values
	for (unsigned int i = 0; i < image.width(); i++) {
		for (unsigned int j = 0; j < image.height(); j++) {
			temp1 = image(i, j);
			temp[temp1]++;
		}
	}
	int nop = image.width()*image.height();
	float result = 0;
	for (int i = 0; i < 256 ; i++) {
		result += (1 / nop)*i*temp[i];
		}
	return result;
}

float cvariance(string nameofimage) {

	CImg<unsigned char> image("nameofimage"), visu(image.width(), image.height(), 1, 3, 0);
	int temp[255];
	int temp1;
	unsigned int max = 255;
	unsigned int min = 0;
	//for storing histogram values
	for (unsigned int i = 0; i < image.width(); i++) {
		for (unsigned int j = 0; j < image.height(); j++) {
			temp1 = image(i, j);
			temp[temp1]++;
		}
	}
	int nop = image.width()*image.height();
	float result = 0;
	for (int i = 0; i < 256; i++) {
		result += (1 / nop)*(i-temp1)*(i - temp1)*temp[i];
	}
	/*result = sqrt(result);*/
	return result;

}
float cstdev(string nameofimage) {
	CImg<unsigned char> image("nameofimage"), visu(image.width(), image.height(), 1, 3, 0);
	int temp[255];
	int temp1;
	unsigned int max = 255;
	unsigned int min = 0;
	//for storing histogram values
	for (unsigned int i = 0; i < image.width(); i++) {
		for (unsigned int j = 0; j < image.height(); j++) {
			temp1 = image(i, j);
			temp[temp1]++;
		}
	}
	int nop = image.width()*image.height();
	float result = 0;
	for (int i = 0; i < 256; i++) {
		result += (1 / nop)*(i - temp1)*(i - temp1)*temp[i];
	}
	result = sqrt(result);
	return result;
}
float cvarcoi(string nameofimage) {
	float result = cstdev(nameofimage)/cmean(nameofimage);
	return result;
}
float casyco(string nameofimage) {
	CImg<unsigned char> image("nameofimage"), visu(image.width(), image.height(), 1, 3, 0);
	int temp[255];
	int temp1;
	unsigned int max = 255;
	unsigned int min = 0;
	//for storing histogram values
	for (unsigned int i = 0; i < image.width(); i++) {
		for (unsigned int j = 0; j < image.height(); j++) {
			temp1 = image(i, j);
			temp[temp1]++;
		}
	}
	int nop = image.width()*image.height();
	float result = 0;
	for (int i = 0; i < 256; i++) {
		result += (1 / nop)*(i - temp1)*(i - temp1)*(i - temp1)*temp[i];
	}
	result = sqrt(result);
	float tempforsecond = 0;
	tempforsecond = 1 / (cstdev(nameofimage)*cstdev(nameofimage)*cstdev(nameofimage));
	result = result * tempforsecond;
	return result;
}


float casycof(string nameofimage) {
	CImg<unsigned char> image("nameofimage"), visu(image.width(), image.height(), 1, 3, 0);
	int temp[255];
	int temp1;
	int tempforsecond = 0;
	unsigned int max = 255;
	unsigned int min = 0;
	//for storing histogram values
	for (unsigned int i = 0; i < image.width(); i++) {
		for (unsigned int j = 0; j < image.height(); j++) {
			temp1 = image(i, j);
			temp[temp1]++;
		}
	}
	int nop = image.width()*image.height();
	float result = 0;
	for (int i = 0; i < 256; i++) {
		tempforsecond += (1 / nop)*i*temp[i];
		}
	for (int i = 0; i < 256; i++) {
		result += (1 / (cstdev(nameofimage) * cstdev(nameofimage) *cstdev(nameofimage) *cstdev(nameofimage)))*(1 / nop)*(i - tempforsecond)*(i - tempforsecond)*(i - tempforsecond)*(i - tempforsecond)*(1/temp[i])*(1 / temp[i])*(1 / temp[i]);
	}
	return result;
}

float cvarcoii(string nameofimage)
{
	CImg<unsigned char> image("nameofimage"), visu(image.width(), image.height(), 1, 3, 0);
	int temp[255];
	int temp1;
	//for storing histogram values
	for (unsigned int i = 0; i < image.width(); i++) {
		for (unsigned int j = 0; j < image.height(); j++) {
			temp1 = image(i, j);
			temp[temp1]++;
		}
	}
	int nop = image.width()*image.height();
	float result = 0;
	for (int i = 0; i < 256; i++) {
		result += (1 / nop)*(1 / nop)*temp[i]*temp[i];
	}
	return result;
}

float centropy(string nameofimage) {
	CImg<unsigned char> image("nameofimage"), visu(image.width(), image.height(), 1, 3, 0);
	int temp[255];
	int temp1;
	//for storing histogram values
	for (unsigned int i = 0; i < image.width(); i++) {
		for (unsigned int j = 0; j < image.height(); j++) {
			temp1 = image(i, j);
			temp[temp1]++;
		}
	}
	int nop = image.width()*image.height();
	float result = 0;
	for (int i = 0; i < 256; i++) {
		result += -(1 / nop) * temp[i] * log2(temp[i] / nop);
	}
	return result;
}
void slaplace_first(string nameofimage) {
	CImg<unsigned char> image("nameofimage"), visu(image.width(), image.height(), 1, 3, 0);
	unsigned char temp[255];
	unsigned char temp1;
	int filter[3][3] = { {0,-1,0},{-1,4,-1},{0,-1,0} };
	//for storing histogram values
	float result = 0;
			for (unsigned int i = 0; i < image.width(); i++) {
				for (unsigned int j = 0; j < image.height(); j++) {
					for (int f = 0; f < 3; f++) {
						for (int d = 0; d < 3; d++) {
							result = image(i, j)*filter[f][d];
						}
					}
				}
			}
					for (unsigned int i = 0; i < image.width(); i++) {
						for (unsigned int j = 0; j < image.height(); j++) {
							image(i, j) = result;
						}
					}
					CImgDisplay main_disp(image);
					//wait until its closed
					while (!main_disp.is_closed()) { main_disp.wait(); }
}
void slaplace_second(string nameofimage) {
	CImg<unsigned char> image("nameofimage"), visu(image.width(), image.height(), 1, 3, 0);
	unsigned char temp[255];
	unsigned char temp1;
	int filter[3][3] = { { -1,-1,-1 },{ -1,-8,-1 },{ -1,-1,-1 } };
	//for storing histogram values
	float result = 0;
	for (unsigned int i = 0; i < image.width(); i++) {
		for (unsigned int j = 0; j < image.height(); j++) {
			for (int f = 0; f < 3; f++) {
				for (int d = 0; d < 3; d++) {
					result = image(i, j)*filter[f][d];
				}
			}
		}
	}
	for (unsigned int i = 0; i < image.width(); i++) {
		for (unsigned int j = 0; j < image.height(); j++) {
			image(i, j) = result;
		}
	}
	CImgDisplay main_disp(image);
	//wait until its closed
	while (!main_disp.is_closed()) { main_disp.wait(); }
}
void slaplace_third(string nameofimage) {
	CImg<unsigned char> image("nameofimage"), visu(image.width(), image.height(), 1, 3, 0);
	unsigned char temp[255];
	unsigned char temp1;
	int filter[3][3] = { { 1,-2,1 },{ -2,4,-2 },{ 1,-2,1 } };
	//for storing histogram values
	float result = 0;
	for (unsigned int i = 0; i < image.width(); i++) {
		for (unsigned int j = 0; j < image.height(); j++) {
			for (int f = 0; f < 3; f++) {
				for (int d = 0; d < 3; d++) {
					result = image(i, j)*filter[f][d];
				}
			}
		}
	}
	for (unsigned int i = 0; i < image.width(); i++) {
		for (unsigned int j = 0; j < image.height(); j++) {
			image(i, j) = result;
		}
	}
	CImgDisplay main_disp(image);
	//wait until its closed
	while (!main_disp.is_closed()) { main_disp.wait(); }
}
void ouolis(string nameofimage)
{
	CImg<unsigned char> image("nameofimage"), visu(image.width(), image.height(), 1, 3, 0);
	int temp[255];
	int temp1;
	float norm = 0;
	float divider = 0;
	for (unsigned int i = 0; i < image.width()-1; i++) {
		for (unsigned int j = 0; j < image.height()-1; j++) {
			norm = (i*i + j*j)* (i*i + j*j);
			divider = image(i - 1, j)*image(i, j + 1)*image(i + 1, j)*image(i, j - 1);
		}
	}
	float result = 1 / 4 * log(norm / divider);
}

int main(int argc, string *argv) {
	
	cout << "Welcome to my task 2."<<endl;
	cout << "You will see the instructions below. Enjoy!" << endl;
	cout << "For calculating histogram, you should enter --calcHist [nameofimage]" << endl;
	cout << "If you want to create a table of histogram with desired image you should enter --plotGenerator" << endl;
	cout << "If you want to implement huniform to your picture you should enter --huniform [nameofimage]" << endl;
	cout << "If you want to get result of implementing mean to your picture --cmean [nameofimage]" << endl;
	cout << "If you want to get variance of your picture --cvariance [nameofimage]" << endl;
	cout << "If you want to get Standard deviation of your picture --cstdev [nameofimage]" << endl;
	cout << "If you want to calculate Variation coefficient I of your picture --cvarcoi [nameofimage]" << endl;
	cout << "If you want to calculate Asymmetry coefficient of your picture --casyco [nameofimage]" << endl;
	cout << "If you want to calculate Flattening coefficient of your picture --casycof [nameofimage]" << endl;
	cout << "If you want to calculate Variation coefficient II of your picture --cvarcoii [nameofimage]" << endl;
	cout << "If you want to calculate Information source entropy of your picture --centropy [nameofimage]" << endl;
	cout << "If you want to implement Extraction of deteials I. Without direcition, laplacian filter to your picture --slaplace_first [nameofimage]" << endl;
	cout << "If you want to implement Extraction of deteials II. Without direcition, laplacian filter to your picture --slaplace_second [nameofimage]" << endl;
	cout << "If you want to implement Extraction of deteials III. Without direcition, laplacian filter to your picture --slaplace_third [nameofimage]" << endl;
	cout << "If you want to implement Uolis operator to your picture --ouolis [nameofimage]" << endl;
	for (int i = 0; i < argc; i++) {
		if (argv[i] == "--calcHist") {
			calcHist(argv[++i]);
		}
		if (argv[i] == "--plotGenerator") {
			plotGenerator();
		}
		if (argv[i] == "huniform") {
			huniform(argv[++i]);
		}
		if (argv[i] == "--cmean") {
			cmean(argv[++i]);
		}
		if (argv[i] == "--cvariance") {
			cvariance(argv[++i]);
		}
		if (argv[i] == "--cstdev") {
			cstdev(argv[++i]);
		}
		if (argv[i] == "--cvarcoi") {
			cvarcoi(argv[++i]);
		}
		if (argv[i] == "--cvarcoii") {
			cvarcoii(argv[++i]);
		}
		if (argv[i] == "--casycof") {
			casycof(argv[++i]);
		}
		if (argv[i] == "--centropy") {
			centropy(argv[++i]);
		}
		if (argv[i] == "--slaplace_first") {
			slaplace_first(argv[++i]);
		}
		if (argv[i] == "--slaplace_second") {
			slaplace_second(argv[++i]);
		}
		if (argv[i] == "--slaplace_third") {
			slaplace_third(argv[++i]);
		}
		if (argv[i] == "--ouolis") {
			ouolis(argv[++i]);
		}
	}
	
	getchar();
	getchar();
	return 0;
}
